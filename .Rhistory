ggplot2::diamonds
library(tidyverse)
library(data.table)
diamondsDT <- as.data.table(ggplot2::diamonds)
diamondsDT
clas diamondsDT
class diamondsDT
class(diamondsDT)
install.packages("tidyverse")
library(tidyverse)
library(data.table)
diamondsDT <- as.data.table(ggplot2::diamonds)
diamDT <- as.data.table(ggplot2::diamonds)
# i.
diamDT[, max_price = max(price), by = carat]
# i.
diamDT[, .(max_price = max(price)), by = carat]
# i.
diamDT[, .(max_price = max(price)), by = carat][order(carat, na.last = TRUE)]
# i.
diamDT[, .(max_price = max(price)), by = carat][order(-carat, na.last = TRUE)]
# ii:
diamDT[, .(max_price = max(price)), by = color][order(color, na.last = TRUE)]
# iii:
diamDT[, .(max_price = max(price)), by = cut][order(cut, na.last = TRUE)]
# iii:
diamDT[, .(max_price = max(price)), by = cut][order(-cut, na.last = TRUE)]
# iv:
diamDT[, .(max_price = max(price)), by = clarity][order(clarity, na.last = TRUE)]
# iii:
head(diamDT[, .(max_price = max(price)), by = cut][order(-cut, na.last = TRUE)])
# iii:
head(diamDT[, .(max_price = max(price)), by = cut][order(-cut, na.last = TRUE)], 10)
# i:
head(diamDT[, .(max_price = max(price)), by = carat][order(-carat, na.last = TRUE)],10)
# ii:
diamDT[, .(max_price = max(price)), by = color][order(color, na.last = TRUE)]
# iii:
head(diamDT[, .(max_price = max(price)), by = cut][order(-cut, na.last = TRUE)])
# iii:
diamDT[, .(max_price = max(price)), by = cut][order(-cut, na.last = TRUE)]
# iv:
diamDT[, .(max_price = max(price)), by = clarity][order(clarity, na.last = TRUE)]
# v:
diamDT[, .(max_price = max(price)), by = color][order(color, na.last = TRUE)]
# i:
head(diamDT[, .(max_price = max(price)), by = carat][order(-max_price, na.last = TRUE)],10)
# vi:
head(, .(max_price = max(price)), by = c(),10)[order(-max_price, na.last = TRUE)]
# vi:
head(, .(max_price = max(price)), by = c(carat, cut),10)[order(-max_price, na.last = TRUE)]
# vi:
diamDT[, .(max_price = max(price)), by = c(carat, cut)][order(-max_price, na.last = TRUE)]
# vi:
diamDT[, .(max_price = max(price)), by = c('carat', 'cut')][order(-max_price, na.last = TRUE)]
# vi:
head(diamDT[, .(max_price = max(price)), by = c('carat', 'cut')][order(-max_price, na.last = TRUE)],10)
# i:
head(diamDT[, .(max_price = max(price)), by = carat][order(-max_price, na.last = TRUE)],10)
# vii:
diamDT[, .(max_price = max(price)), by = c(carat, clarity)][order(-max_price, na.last = TRUE)]
# vii:
diamDT[, .(max_price = max(price)), by = c('carat', 'clarity')][order(-max_price, na.last = TRUE)]
# vii:
head(diamDT[, .(max_price = max(price)), by = c('carat', 'clarity')][order(-max_price, na.last = TRUE)],10)
ggplot(data = diamDT) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamDT) +
geom_point(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamDT) +
geom_point(mapping = aes(x = carat, y = price, color = cut)) +
facet_grid(cut)
ggplot(data = diamDT) +
geom_point(mapping = aes(x = carat, y = price, color = cut)) +
facet_grid(~ cut)
dev.off()
ggplot(data = diamDT) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamDT) +
geom_point(mapping = aes(x = carat, y = price, color = cut))
ggplot(data = diamDT) +
geom_point(mapping = aes(x = carat, y = price, color = cut)) +
facet_grid(~ cut)
# iV:
ggplot(data = diamDT) +
geom_point(mapping = aes(x = carat, y = price, color = cut)) +
facet_grid(cut ~ color)
# 5. ggplot tipo caja
ggplot(data = diamDT, mapping = aes(x = cut, y = price)) +
geom_boxplot() +
coord_flip()
# 5. ggplot tipo caja
ggplot(data = diamDT, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[,price, by = cut][order(price, na.last = TRUE)]
diamond_sorted_price
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[,price, by = cut][order(-price, na.last = TRUE)]
diamond_sorted_price
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[,.(mean_price = mean(price)), by = cut][order(-mean_price, na.last = TRUE)]
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[,price, by = cut][order(-mean(price), na.last = TRUE)]
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# 5. ggplot tipo caja
diamond_sorted_price <- setorder(diamDT, -price)
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[, mean_price := mean(price)]
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
View(diamond_sorted_price)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[order(-price)]
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[,,by = cut][order(-price)]
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[,mean_price = mean(price),by = cut][order(-mean_price, na.last = TRUE)]
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[,.(mean_price = mean(price)),by = cut][order(-mean_price, na.last = TRUE)]
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
View(diamond_sorted_price)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[,mean_price := mean(price),by = cut][order(-mean_price, na.last = TRUE)]
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
View(diamond_sorted_price)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT %>%
mutate(cut = fct_reorder(cut, -price))
View(diamond_sorted_price)
rm(diamond_sorted_price)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT %>%
mutate(cut = fct_reorder(cut, -price))
View(diamond_sorted_price)
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
dev.off()
rm(diamond_sorted_price)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT %>%
mutate(cut = fct_reorder(cut, -mean_price))
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
View(diamDT)
rm(list = ls())
diamDT <- as.data.table(ggplot2::diamonds)
View(diamDT)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT %>%
mutate(cut = fct_reorder(cut, -mean_price))
View(diamDT)
# 5. ggplot tipo caja
diamDT[,.(median_price := median(price)), by = cut]
# 5. ggplot tipo caja
diamDT[,median_price := median(price), by = cut]
View(diamDT)
diamDT <- as.data.table(ggplot2::diamonds)
# 5. ggplot tipo caja
diamDT2 <- diamDT[,median_price := median(price), by = cut]
View(diamDT)
# v:
diamDT[, .(max_price = max(price)), by = c(carat, color)][order(-max_price, na.last = TRUE)]
# v:
diamDT[, .(max_price = max(price)), by = c('carat', 'color')][order(-max_price, na.last = TRUE)]
diamDT <- as.data.table(ggplot2::diamonds)
# 5. ggplot tipo caja
diamDT2 <- diamDT[, .(median_price = median(price)), by = cut]
View(diamDT2)
# 5. ggplot tipo caja
diamDT2 <- diamDT[, median_price := median(price)]
View(diamDT2)
# 5. ggplot tipo caja
diamDT2 <- diamDT[, median_price := median(price), by = cut]
# Operaciones sobre las filas y las columnas
#  1) Convertimos a DataTable el movies dataset
movDT <- as.data.table(movies)
install.packages("ggplot2movies")
library("ggplot2movies", lib.loc="C:/Users/avv1g/Anaconda3/envs/R - Env/Lib/R/library")
# Operaciones sobre las filas y las columnas
#  1) Convertimos a DataTable el movies dataset
movDT <- as.data.table(movies)
#Podemos calcular varias cosas a la vez
movDT[, .(anno_max = max(year), dur_media = mean(length))]
View(movDT)
# Y ahora calculamos la media por aÃ±o, y ya sale ordenado
movDT[, .(durac_media_anual = mean(length)), by = year]
View(movDT)
rm(diamDT2)
rm(movDT)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT[, median(price), by = cut]
View(diamond_sorted_price)
# Operaciones sobre las filas y las columnas
#  1) Convertimos a DataTable el movies dataset
movDT <- as.data.table(movies)
# Operaciones sobre una columna
movDT[, .(sum(budget))]
#Podemos calcular varias cosas a la vez
movDT[, .(anno_max = max(year), dur_media = mean(length))]
# Agrupar by
movDT[, .(durac_media_anual = mean(length)), by = year]
#Podemos calcular varias cosas a la vez
movDT[, .(anno_max = max(year), dur_media = mean(length))]
# Agrupar by
movDT[, .(durac_media_anual = mean(length)), by = year]
# Cómo seleccionar una columna en particular
movDT[,year]
rm(diamond_sorted_price)
# Pero el resultado ha salido desordenado, podemos agrupar y ordenar
# ascendente con year
movDT[, .(durac_media_anual = mean(length)), by = year][order(year, na.last = TRUE)]
setorder(movDT, year)
# Vemos como se ha ordenado el data table por aÃ±o
head(movDT)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT %>%
mutate(cut = fct_reorder(cut,-price))
View(diamond_sorted_price)
rm(diamond_sorted_price)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT %>%
mutate(cut = fct_reorder(cut,-price))
View(diamDT)
diamDT <- as.data.table(ggplot2::diamonds)
View(diamDT)
# 5. ggplot tipo caja
diamond_sorted_price <- diamDT %>%
mutate(cut = fct_reorder(cut,-price))
ggplot(data = diamond_sorted_price, mapping = aes(x = cut, y = price)) +
geom_boxplot()
diamDT <- as.data.table(ggplot2::diamonds)
ggplot(data = diamDT, mapping = aes(x = cut, y = price)) +
geom_boxplot()
View(diamond_sorted_price)
View(diamDT)
# ii:
ggplot(data = diamDT, mapping = aes(x = color, y = price)) +
geom_boxplot()
diamDT <- as.data.table(ggplot2::diamonds)
# i:
ggplot(data = diamDT, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# ii:
ggplot(data = diamDT, mapping = aes(x = color, y = price)) +
geom_boxplot()
# i:
ggplot(data = diamDT, mapping = aes(x = cut, y = price)) +
geom_boxplot()
library(data.table)
library(tidyverse)
diamonds
rm(movDT)
rm(diamond_sorted_price)
library("modelr", lib.loc="C:/Users/avv1g/Anaconda3/envs/R - Env/Lib/R/library")
library("knitr", lib.loc="C:/Users/avv1g/Anaconda3/envs/R - Env/Lib/R/library")
library(shiny)
library(rsconnect)
library(data.table)
library(tidyverse)
library(broom)
library(magrittr)
library(gsubfn)
library(purrr)
library(fmsb)
library(shiny)
library(rsconnect)
library(data.table)
library(tidyverse)
library(broom)
library(magrittr)
library(gsubfn)
library(purrr)
library(fmsb)
library(gsubfn)
library(rgdal)
library(leaflet)
library(fmsb)
runApp('D:/Mis Documentos/Master Big Data/4-5 Visualizacion avanzada/fifa19_dataviz')
# 3) Data preoprocessing for the map:
# download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="data/world_shape_file.zip")
# system("unzip DATA/world_shape_file.zip")
# world_spdf <- readOGR(
#   dsn= paste0(getwd(),"/data/world_shape_file/"),
#   layer="TM_WORLD_BORDERS_SIMPL-0.3",
#   verbose=FALSE
# )
world_spdf <- readOGR("data/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp")
# 3) Data preoprocessing for the map:
# download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="data/world_shape_file.zip")
# system("unzip DATA/world_shape_file.zip")
# world_spdf <- readOGR(
#   dsn= paste0(getwd(),"/data/world_shape_file/"),
#   layer="TM_WORLD_BORDERS_SIMPL-0.3",
#   verbose=FALSE
# )
world_spdf <- readOGR("data/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp")
setwd("D:/Mis Documentos/Master Big Data/4-5 Visualizacion avanzada/fifa19_dataviz/")
# 3) Data preoprocessing for the map:
# download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="data/world_shape_file.zip")
# system("unzip DATA/world_shape_file.zip")
# world_spdf <- readOGR(
#   dsn= paste0(getwd(),"/data/world_shape_file/"),
#   layer="TM_WORLD_BORDERS_SIMPL-0.3",
#   verbose=FALSE
# )
world_spdf <- readOGR("data/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp")
# Data ingestion.
# The data-set contains more than 18,000 players of the FIFA19 database, with more than 80 features.
# In order to simplify the dataset I have skip some columns that the game uses for its internal mechanics
# (e.g. skill points dependeing on the player positions, and additional information that is not needed for
# the intended analysis, like Loaned From, or if the players models have photorealistic face or not).
players <- read_csv("data/data.csv",
na = character(),
col_types = cols(
Club = col_character(),
Special = col_skip(),
`Preferred Foot` = col_factor(levels = NULL),
`Body Type` = col_skip(),
`Real Face` = col_skip(),
`Loaned From` = col_skip(),
LS = col_skip(),
ST = col_skip(),
RS = col_skip(),
LW = col_skip(),
LF = col_skip(),
CF = col_skip(),
RF = col_skip(),
RW = col_skip(),
LAM = col_skip(),
CAM = col_skip(),
RAM = col_skip(),
LM = col_skip(),
LCM = col_skip(),
CM = col_skip(),
RCM = col_skip(),
RM = col_skip(),
LWB = col_skip(),
LDM = col_skip(),
CDM = col_skip(),
RDM = col_skip(),
RWB = col_skip(),
LB = col_skip(),
LCB = col_skip(),
CB = col_skip(),
RCB = col_skip(),
RB = col_skip()
)
)
View(players)
unique(players$Position)
unique(players$Club)
# Summarise Overall average by Country of Origin
players %>% group_by(Nationality) %>% summarise(avg = mean())
# Summarise Overall average by Country of Origin
players %>% group_by(Nationality) %>% summarise(avg = mean(Overall))
# Summarise Overall average by Country of Origin
players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall)) %>%
arrange(desc(Overall))
# Summarise Overall average by Country of Origin
players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall)) %>%
arrange(desc())
# Summarise Overall average by Country of Origin
players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall)) %>%
arrange(desc(avg))
# Summarise Overall average by Country of Origin
nationality_overall <- players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall)) %>%
arrange(desc(avg))
# Summarise Overall average by Country of Origin
nationality_overall <- players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall), count = count(Nationality)) %>%
arrange(desc(avg))
# Summarise Overall average by Country of Origin
nationality_overall <- players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall)) %>%
arrange(desc(avg)) %>% count()
nationality_overall
# Summarise Overall average by Country of Origin
nationality_overall <- players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall), count = n()) %>%
arrange(desc(avg))
nationality_overall
players$Nationality %>% count()
players$Nationality %>% summarise(n())
players$Nationality %>% summarise(c = n())
View(nationality_overall)
saveRDS(nationality_overall, file="data/processed_nationality.rds")
runApp()
View(players)
# Summarise Overall average by Country of Origin
nationality_overall <- players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall), avg_value = mean(`Value (M€)`, count = n())) %>%
arrange(desc(avg))
# Data ingestion.
# The data-set contains more than 18,000 players of the FIFA19 database, with more than 80 features.
# In order to simplify the dataset I have skip some columns that the game uses for its internal mechanics
# (e.g. skill points dependeing on the player positions, and additional information that is not needed for
# the intended analysis, like Loaned From, or if the players models have photorealistic face or not).
players <- read_csv("data/data.csv",
na = character(),
col_types = cols(
Club = col_character(),
Special = col_skip(),
`Preferred Foot` = col_factor(levels = NULL),
`Body Type` = col_skip(),
`Real Face` = col_skip(),
`Loaned From` = col_skip(),
LS = col_skip(),
ST = col_skip(),
RS = col_skip(),
LW = col_skip(),
LF = col_skip(),
CF = col_skip(),
RF = col_skip(),
RW = col_skip(),
LAM = col_skip(),
CAM = col_skip(),
RAM = col_skip(),
LM = col_skip(),
LCM = col_skip(),
CM = col_skip(),
RCM = col_skip(),
RM = col_skip(),
LWB = col_skip(),
LDM = col_skip(),
CDM = col_skip(),
RDM = col_skip(),
RWB = col_skip(),
LB = col_skip(),
LCB = col_skip(),
CB = col_skip(),
RCB = col_skip(),
RB = col_skip()
)
)
players$Club <- players$Club %>%
str_replace_all("^$", "Free agent")
players$`Preferred Foot` <- players$`Preferred Foot` %>%
replace_na("Right")
players$`Weak Foot` <- players$`Weak Foot` %>%
replace_na(1)
players$`International Reputation` <- players$`International Reputation` %>%
replace_na(1)
# Convert dates into only years
players$Joined <- players$Joined %>%
str_replace_all("^.*([0-9]{4}$)", "\\1")
unique(players$Joined)
players$`Contract Valid Until` <-
players$`Contract Valid Until` %>%
str_replace_all("^.*([0-9]{4}$)", "\\1")
# Preprocess heigth column
players <- players %>%
separate(Height, c("Height_ft", "Height_in"), sep = "'")
players <- players %>%
mutate("Height (cm)" = round(as.numeric(Height_ft) * FEET_TO_METERS + as.numeric(Height_in) * INCHES_TO_CM))
# Preprocess weight column
players <- rename(players, "Weight_lbs" = Weight)
players$Weight_lbs <-
players$Weight_lbs %>%
str_replace_all("lbs", "")
players$`Weight (kg)` <- round(as.numeric(players$Weight_lbs))
# Preprocessing of the Wage, Value and Release Clause columns
players$`Release Clause` <-
players$`Release Clause` %>%
str_replace_all(c("€"="", "^$" = "0"))
players$`Release Clause (M€)` <- as.numeric(gsubfn('([a-zA-Z])', list(M='e+0', K='e-3'), players$`Release Clause`))
players$Value <-
players$Value %>%
str_replace_all(c("€" = "", "^$" = "0"))
players$`Value (M€)` <- as.numeric(gsubfn('([a-zA-Z])', list(M='e+0', K='e-3'), players$Value))
players$Wage <-
players$Wage %>%
str_replace_all(c("€" = "", "^$" = "0"))
players$`Wage (K€)` <-  as.numeric(gsub('([a-zA-Z])', 'e+0', players$Wage))
# Saving the players data.
saveRDS(players,file="data/processed_players.rds")
# Summarise Overall average by Country of Origin
nationality_overall <- players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall), avg_value = mean(`Value (M€)`, count = n())) %>%
arrange(desc(avg))
saveRDS(nationality_overall, file="data/processed_nationality.rds")
View(nationality_overall)
# Summarise Overall average by Country of Origin
nationality_overall <- players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall), avg_value = round(mean(`Value (M€)`)), count = n()) %>%
arrange(desc(avg))
saveRDS(nationality_overall, file="data/processed_nationality.rds")
View(nationality_overall)
# Summarise Overall average by Country of Origin
nationality_overall <- players %>% group_by(Nationality) %>%
summarise(avg = mean(Overall), avg_value = round(mean(`Value (M€)`), 1), count = n()) %>%
arrange(desc(avg))
saveRDS(nationality_overall, file="data/processed_nationality.rds")
library(htmltools)
runApp()
